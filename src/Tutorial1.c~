#include <pebble.h>

static Window *s_main_window;
static TextLayer *s_output_layer;
static TextLayer *s_output_layer1;
static TextLayer *s_output_layer2;

// Will is buzz?
bool up = false;
bool down = false;

// Are they moving?
static void data_handler(AccelData *data, uint32_t num_samples) {
  static char s_buffer[128];
  
  // Compose string of all data
  if(!data[0].did_vibrate)
  {
     // Magic numbers for calibration
     int x = (data[0].x+8);
     int y = (data[0].y+32);
     int z = (data[0].z+1024);
     if(x == 0 && y == 0 && z == 0 && up)
     {
         vibes_short_pulse();
     }
     snprintf(s_buffer, sizeof(s_buffer), "X: %d\nY: %d\nZ: %d\n",x,y,z);
  }

  //Show the data
  text_layer_set_text(s_output_layer, s_buffer);
}

// The screen
static void main_window_load(Window *window) {
  Layer *window_layer = window_get_root_layer(window);
  GRect window_bounds = layer_get_bounds(window_layer);
  
  // Compass Layer
  s_output_layer2 = text_layer_create(GRect(0, (window_bounds.size.h/3), window_bounds.size.w, (3*(window_bounds.size.h/5))));
  text_layer_set_text(s_output_layer2, "Calibrating...");
  text_layer_set_text_alignment(s_output_layer2, GTextAlignmentCenter);
  layer_add_child(window_layer, text_layer_get_layer(s_output_layer2));

  // Motion Layer
  s_output_layer = text_layer_create(GRect(5, 0, window_bounds.size.w - 10, (int)(window_bounds.size.h/3)));
  text_layer_set_text(s_output_layer, "No data yet.");
  text_layer_set_overflow_mode(s_output_layer, GTextOverflowModeWordWrap);
  layer_add_child(window_layer, text_layer_get_layer(s_output_layer));
  
  // Toggle Layer
  s_output_layer1 = text_layer_create(GRect(0, ((window_bounds.size.h/5)*3), window_bounds.size.w, window_bounds.size.h));
  text_layer_set_font(s_output_layer1, fonts_get_system_font(FONT_KEY_GOTHIC_24));
  text_layer_set_text(s_output_layer1, "  No Motion.\n  No Compass.");
  text_layer_set_overflow_mode(s_output_layer1, GTextOverflowModeWordWrap);
  layer_add_child(window_layer, text_layer_get_layer(s_output_layer1)); 
}

static void main_window_unload(Window *window) {
  // Destroy output TextLayer
  text_layer_destroy(s_output_layer);
  text_layer_destroy(s_output_layer2);
}

static void compass_handler(CompassHeadingData data) {
  static char buffer[360];
  bool north = false;
  if(data.compass_status == CompassStatusDataInvalid)
  {
      text_layer_set_text(s_output_layer2, "Compass data invalid");
  }else if(data.compass_status == CompassStatusCalibrating)
  {
      snprintf(buffer, sizeof(buffer), "Compass calibrating\nHeading: %d", TRIGANGLE_TO_DEG((int)data.true_heading));
      if(TRIGANGLE_TO_DEG((int)data.true_heading) >= -5 && TRIGANGLE_TO_DEG((int)data.true_heading) <= 5)
      {
          north = true;
      }
      text_layer_set_text(s_output_layer2, buffer);
  }else if(data.compass_status == CompassStatusCalibrated)
  {
      snprintf(buffer, sizeof(buffer), "Heading: %d", TRIGANGLE_TO_DEG((int)data.true_heading));
      if(TRIGANGLE_TO_DEG((int)data.true_heading) >= -5 && TRIGANGLE_TO_DEG((int)data.true_heading) <= 5)
      {
          north = true;
      }
  }else
  {
     snprintf(buffer, sizeof(buffer), "Unknown: %d", data.compass_status);
     text_layer_set_text(s_output_layer2, buffer);
  }
  
  if(north && down)
  {
      vibes_long_pulse();
  }
}

static void setText(){
   if(up){
       if(down){
           text_layer_set_text(s_output_layer1, " Motion and Compass");
       }else{
           text_layer_set_text(s_output_layer1, "  Motion\n  No Compass.");
       }
   }
   else{
       if(down){
           text_layer_set_text(s_output_layer1, "  No Motion.\n  Compass");
       }else{
           text_layer_set_text(s_output_layer1, "  No Motion.\n  No Compass.");
       }
   }
}

//Toggle the motion sensor
static void up_click_handler(ClickRecognizerRef recognizer, void *context) {
  up = !up;
  setText();
}

//Turn on both sensors
static void select_click_handler(ClickRecognizerRef recognizer, void *context) {
   up = true;
   down = true;
   text_layer_set_text(s_output_layer1, " Motion and Compass");
}

//Toggle Northbound alert
static void down_click_handler(ClickRecognizerRef recognizer, void *context) {
  down = !down;
  setText();
}

static void click_config_provider(void *context) {
  window_single_click_subscribe(BUTTON_ID_UP, up_click_handler);
  window_single_click_subscribe(BUTTON_ID_SELECT, select_click_handler);
  window_single_click_subscribe(BUTTON_ID_DOWN, down_click_handler);
}

// Starts app, creating a window per display
static void init() {
  // Create main Window
  s_main_window = window_create();
  window_set_window_handlers(s_main_window, (WindowHandlers) {
    .load = main_window_load,
    .unload = main_window_unload
  });
  window_stack_push(s_main_window, true);

  // Accelerometer
  int num_samples = 1;
  accel_data_service_subscribe(num_samples, data_handler);
    
  // Register Clicks
  window_set_click_config_provider(s_main_window, click_config_provider);
  
  // Subscribe to compass updates when angle changes by 10 degrees
  compass_service_subscribe(compass_handler);
  compass_service_set_heading_filter(0);

    // Choose update rate
    accel_service_set_sampling_rate(ACCEL_SAMPLING_10HZ);
}

//Exits the app, destroying memory footprint
static void deinit() {
  window_destroy(s_main_window);
  accel_data_service_unsubscribe();
}

//Leave alone
int main(void) {
  init();
  app_event_loop();
  deinit();
}
